using System;
using System.Collections.Generic;
using System.Linq;
using AirSnitch.Core.Domain.Exceptions;

namespace AirSnitch.Core.Domain.Models
{
    /// <summary>
    /// Object that represent aire pollution results that was returned from monitoring station.
    /// </summary>
    public class AirPollution : EmptyDomainModel<AirPollution>, IDomainModel<AirPollution>
    {
        private static List<AirPollutionRange> _airPolutionRanges = new List<AirPollutionRange>()
        {
            new AirPollutionRange()
            {
                StartValue = 0,
                EndValue = 50,
                Description = "‚úÖ –Ø–∫—ñ—Å—Ç—å –ø–æ–≤—ñ—Ç—Ä—è —Ö–æ—Ä–æ—à–∞.\n\n‚û° –ú–æ–∂–Ω–∞ –≥—É–ª—è—Ç–∏ —Ç–∞ –∑–∞–π–º–∞—Ç–∏—Å—è —Å–ø–æ—Ä—Ç–æ–º –±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å üö¥ üèÄ"
            },
            new AirPollutionRange()
            {
                StartValue = 51,
                EndValue = 100,
                Description =
                    "‚úÖ –Ø–∫—ñ—Å—Ç—å –ø–æ–≤—ñ—Ç—Ä—è —î –ø—Ä–∏–π–Ω—è—Ç–Ω–æ—é.\n\n‚û° –ú–æ–∂–Ω–∞ –≥—É–ª—è—Ç–∏, –∑–∞–∏ÃÜ–º–∞—Ç–∏—Å—å —Å–ø–æ—Ä—Ç–æ–º —Ç–∞ –ø—Ä–æ–≤—ñ—Ç—Ä—é–≤–∞—Ç–∏ –ø—Ä–∏–º—ñ—â–µ–Ω–Ω—è, –æ–¥–Ω–∞–∫ –ª—é–¥—è–º –∑ —Ä–µ—Å–ø—ñ—Ä–∞—Ç–æ—Ä–Ω–∏–º–∏ –∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω–Ω—è–º–∏ –≤–∞—Ä—Ç–æ —É—Ç—Ä–∏–º–∞—Ç–∏—Å—è –≤—ñ–¥ –ø—Ä–æ–≥—É–ª—è–Ω–æ–∫‚ùó"
            },
            new AirPollutionRange()
            {
                StartValue = 101,
                EndValue = 150,
                Description = "üÜò –Ø–∫—ñ—Å—Ç—å –ø–æ—Ç–≤—ñ—Ç—Ä—è –ø–æ–≥–∞–Ω–∞ üÜò \n" +
                              "–Ü—Å–Ω—É—î —Ä–∏–∑–∏–∫ –¥–ª—è —Ç–≤–æ–≥–æ –∑–¥–æ—Ä–æ–≤‚Äô—è‚ùó‚ùó–í–∞—Ä—Ç–æ —É—Ç—Ä–∏–º–∞—Ç–∏—Å—è –≤—ñ–¥ –ø—Ä–æ–≥—É–ª—è–Ω–æ–∫ —ñ –∑–∞–Ω—è—Ç—å —Å–ø–æ—Ä—Ç–æ–º —Ç–∞ —É–Ω–∏–∫–∞—Ç–∏ " +
                              "–ø—Ä–æ–≤—ñ—Ç—Ä—é–≤–∞–Ω–Ω—è –ø—Ä–∏–º—ñ—â–µ–Ω—å. –õ—é–¥–∏ —á—É—Ç–ª–∏–≤—ñ –¥–æ –∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω—å –ª–µ–≥–µ–Ω–µ–≤–∏—Ö —à–ª—è—Ö—ñ–≤ –º–æ–∂—É—Ç—å –≤—ñ–¥—á—É–≤–∞—Ç–∏ –µ—Ñ–µ–∫—Ç –∑–∞–±—Ä—É–¥–Ω–µ–Ω–æ–≥–æ –ø–æ–≤—ñ—Ç—Ä—è"
            },
            new AirPollutionRange()
            {
                StartValue = 151,
                EndValue = 200,
                Description = "üÜò –ü–û–í–Ü–¢–†–Ø –ù–ê–î–ó–í–ò–ß–ê–òÃÜ–ù–û –ó–ê–ë–†–£–î–ù–ï–ù–ï üÜò \n" +
                              "–Ü—Å–Ω—É—î –∑–Ω–∞—á–Ω–∏–∏ÃÜ —Ä–∏–∑–∏–∫ –¥–ª—è —Ç–≤–æ–≥–æ –∑–¥–æ—Ä–æ–≤'—è‚ùó‚ùó–ó–∞–ª–∏—à–∞–∏ÃÜ—Å—è –≤–¥–æ–º–∞ —Ç–∞ –Ω–µ –≤–∏—Ö–æ–¥—å –Ω–∞ –≤—É–ª–∏—Ü—é –±–µ–∑ –∑–∞—Ö–∏—Å–Ω–æ—ñÃà " +
                              "–º–∞—Å–∫–∏ –Ø–∫—ñ—Å—Ç—å –ø–æ–≤—ñ—Ç—Ä—è —î –ø–æ–≥–∞–Ω–æ—é. –í–∞—Ä—Ç–æ —É—Ç—Ä–∏–º–∞—Ç–∏—Å—è –≤—ñ–¥ –ø—Ä–æ–≥—É–ª—è–Ω–æ–∫ —Ç–∞ –∑–∞–∫—Ä–∏—Ç–∏ –≤—ñ–∫–Ω–∞."
            },
        };

        public bool IsEmpty { get; set; }

        /// <summary>
        /// AQI value based on US EPA standard
        /// </summary>
        public int AqiusValue {get;set;}

        /// <summary>
        /// Property that indicate data time of current air pollution
        /// </summary>
        public DateTime MeasurementDateTime { get; set; }

        /// <summary>
        /// Monitoring station instance that provided result
        /// </summary>
        public AirMonitoringStation MonitoringStation { get; set; }
        
        /// <summary>
        /// Wind speed (m/s)
        /// </summary>
        public int WindSpeed {get;set;}
        
        /// <summary>
        /// humidity percentage value
        /// </summary>
        public int Humidity {get;set;}
        
        /// <summary>
        /// /temperature value. By default in Celsius
        /// </summary>
        public int Temperature {get;set;}

        /// <summary>
        /// Analyze received air pollution data according to Air Quality Index
        /// For details check: https://www.airnow.gov/aqi/aqi-basics/
        /// </summary>
        /// <returns>AirPollutionAnalyzerResult <cref="AirPollutionAnalyzerResult"></cref>
        /// </returns>
        public AirPollutionResult Analyze()
        {
            var currentAirPollutionRange = _airPolutionRanges
                .Single(range => range.StartValue <= AqiusValue && range.EndValue >= AqiusValue);

            return new AirPollutionResult()
            {
                CurrentPollutionValue = AqiusValue,
                HumanOrientedMessage = currentAirPollutionRange.Description
            };
        }
        
        /// <summary>
        /// Method that returns a deep copy of current CityAirPollution object
        /// </summary>
        /// <returns></returns>
        public object Clone()
        {
            var copy = (AirPollution)this.MemberwiseClone();
            copy.MonitoringStation = (AirMonitoringStation)MonitoringStation.Clone();
            return copy;
        }
        
        public bool IsValid()
        {
            if (IsEmpty)
            {
                return true;
            }

            return AqiusValue > 0 && MeasurementDateTime > DateTime.MinValue && MonitoringStation != null;
        }

        public void Validate()
        {
            if (AqiusValue > 0 && MeasurementDateTime > DateTime.MinValue && MonitoringStation != null)
            {
                return;
            }

            throw new InvalidEntityStateException("Air pollution object is not valid.");
        }

        public bool Equals(AirPollution other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            return IsEmpty == other.IsEmpty && AqiusValue == other.AqiusValue;
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals((AirPollution) obj);
        }

        public override int GetHashCode()
        {
            return HashCode.Combine(IsEmpty, AqiusValue);
        }

        public override string ToString()
        {
            return $"AIQ value: {AqiusValue}, MeasurementDateTime: {MeasurementDateTime}";
        }
    }
}